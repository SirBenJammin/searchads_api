name: Publish Python Package

on:
  push:
    branches:
      - master
    paths-ignore:
      - '.bumpversion.cfg'
      - 'setup.py'
  workflow_dispatch:
    inputs:
      bump_rule:
        description: 'Version bump rule (major/minor/patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_KEY }}

    - name: Set up Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git remote set-url origin git@github.com:${{ github.repository }}.git

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine bump2version

    - name: Bump version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          bump2version ${{ github.event.inputs.bump_rule }}
        else
          bump2version patch
        fi

    - name: Get bumped version
      id: get_version
      run: |
        echo "VERSION=$(python setup.py --version)" >> $GITHUB_ENV

    - name: Commit changes
      run: |
        git add .bumpversion.cfg setup.py
        git commit -m "Bump version: ${{ env.VERSION }}"

    - name: Push changes
      run: |
        git push
        git push --tags

    - name: Create GitHub release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VERSION: ${{ env.VERSION }}
      run: |
        curl -X POST \
        -H "Authorization: token $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/repos/${{ github.repository }}/releases \
        -d '{"tag_name":"v'${{ env.VERSION }}'","name":"v'${{ env.VERSION }}'","body":"Release version '${{ env.VERSION }}'"}'

    - name: Build package
      run: python setup.py sdist bdist_wheel

    - name: Publish package
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.SEARCHADS_API_PUBLISH_TOKEN }}
      run: twine upload dist/*

    - name: Clean up
      run: rm -rf dist build *.egg-info
